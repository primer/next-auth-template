import { useEffect, useState } from "react";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { DataTable, Table } from "@primer/react/drafts";
import { Octokit } from "octokit";
import { Label, RelativeTime } from "@primer/react";

function uppercase(input: string): string {
  return input[0].toUpperCase() + input.slice(1);
}

export default function Home() {
  const { data } = useSession();
  const [loading, setLoading] = useState(true);
  const [notifications, setNotifications] = useState<any[]>([]);
  const [octokit, setOctokit] = useState<Octokit>();

  useEffect(() => {
    if (data?.accessToken) {
      setOctokit(new Octokit({ auth: data.accessToken }));
      setLoading(false);
    }
  }, [data]);

  async function getNotifications() {
    const { data } = await octokit?.request("GET /notifications");
    setNotifications(data);
    console.log(data);
  }

  useEffect(() => {
    if (octokit) {
      getNotifications();
    }
  }, [octokit]);

  if (loading) {
    return <div>Loading...</div>;
  }

  interface Notification {
    id: string;
    unread: boolean;
    reason: string;
    updated_at: string;
    last_read_at: string;
    subject: {
      title: string;
      url: string;
      latest_comment_url: string;
      type: string;
    };
    repository: {
      name: string;
      owner: {
        login: string;
      };
    };
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Table.Container sx={{ maxWidth: 1200, margin: "0 auto" }}>
          <DataTable
            aria-labelledby="notifications"
            aria-describedby="notifications-subtitle"
            data={notifications}
            columns={[
              {
                header: "Title",
                field: "subject.title",
                rowHeader: true,
              },
              {
                header: "Repository",
                field: "repository.name",
              },
              {
                header: "Owner",
                field: "repository.owner.login",
              },
              {
                header: "Updated",
                field: "updated_at",
                renderCell: (row) => {
                  return <RelativeTime date={new Date(row.updated_at)} />;
                },
              },
              {
                header: "Reason",
                field: "reason",
              },
              {
                header: "Unread",
                field: "unread",
                renderCell: (row) => {
                  return row.unread ? <Label>Unread</Label> : null;
                },
              },
            ]}
          />{" "}
        </Table.Container>
      </main>
    </>
  );
}
